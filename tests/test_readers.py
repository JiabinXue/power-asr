import unittest
from power.readers import AlignmentReaderJson
from power.levenshtein import ExpandedAlignment

class Readers_Test(unittest.TestCase):
    def test_read_json(self):
        jstr = '''{"errRate": 0.32653061224489793, "alignments": [{"hyp": "everyone", "align": "C", "ref": "Everyone"}, {"hyp": "who", "align": "C", "ref": "who"}, {"hyp": "knew", "align": "C", "ref": "knew"}, {"hyp": "me", "align": "C", "ref": "me"}, {"hyp": "before", "align": "C", "ref": "before"}, {"hyp": "nine 11", "align": "S", "ref": "911"}, {"hyp": "the", "align": "I", "ref": ""}, {"hyp": "believes", "align": "S", "ref": "believes"}, {"hyp": "line", "align": "S", "ref": "I'm"}, {"hyp": "", "align": "D", "ref": "dead"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "used", "align": "C", "ref": "used"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "work", "align": "C", "ref": "work"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "bunch", "align": "C", "ref": "bunch"}, {"hyp": "of", "align": "C", "ref": "of"}, {"hyp": "uptight", "align": "C", "ref": "uptight"}, {"hyp": "religious", "align": "C", "ref": "religious"}, {"hyp": "people", "align": "C", "ref": "people"}, {"hyp": "so", "align": "C", "ref": "so"}, {"hyp": "sometimes", "align": "C", "ref": "sometimes"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "didn't", "align": "C", "ref": "didn't"}, {"hyp": "wear", "align": "C", "ref": "wear"}, {"hyp": "panties", "align": "C", "ref": "panties"}, {"hyp": "is", "align": "S", "ref": "and"}, {"hyp": "that", "align": "S", "ref": "just"}, {"hyp": "", "align": "D", "ref": "had"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "big", "align": "C", "ref": "big"}, {"hyp": "smile", "align": "C", "ref": "smile"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "chuckle", "align": "S", "ref": "chuckled"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "myself", "align": "C", "ref": "myself"}, {"hyp": "from", "align": "I", "ref": ""}, {"hyp": "this", "align": "C", "ref": "This"}, {"hyp": "next", "align": "C", "ref": "next"}, {"hyp": "one", "align": "C", "ref": "one"}, {"hyp": "takes", "align": "C", "ref": "takes"}, {"hyp": "", "align": "D", "ref": "a"}, {"hyp": "little", "align": "C", "ref": "little"}, {"hyp": "explanation", "align": "C", "ref": "explanation"}, {"hyp": "of", "align": "S", "ref": "before"}, {"hyp": "right", "align": "S", "ref": "I"}, {"hyp": "here", "align": "S", "ref": "share"}, {"hyp": "", "align": "D", "ref": "it"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "you", "align": "C", "ref": "you"}], "id": 52, "errorTypes": {"C": 36, "D": 4, "I": 2, "S": 10, "refLength": 49}}'''
        expand_align = AlignmentReaderJson.read_json(jstr)
        self.assertTrue(len(expand_align.s1), len(expand_align.s2))
        self.assertTrue(len(expand_align.s1), len(expand_align.align))
        
    def test_read_json2(self):
        jstr = '''{"errRate": 0.35294117647058826, "alignments": [{"hyp": "", "align": "D", "ref": "A"}, {"hyp": "fifty year old", "align": "S", "ref": "50-year-old"}, {"hyp": "business", "align": "C", "ref": "business"}, {"hyp": "man", "align": "C", "ref": "man"}, {"hyp": "laments", "align": "S", "ref": "lamented"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "me", "align": "C", "ref": "me"}, {"hyp": "that", "align": "C", "ref": "that"}, {"hyp": "he", "align": "C", "ref": "he"}, {"hyp": "feels", "align": "C", "ref": "feels"}, {"hyp": "he", "align": "C", "ref": "he"}, {"hyp": "doesn't", "align": "C", "ref": "doesn't"}, {"hyp": "have", "align": "C", "ref": "have"}, {"hyp": "colleagues", "align": "C", "ref": "colleagues"}, {"hyp": "anymore", "align": "C", "ref": "anymore"}, {"hyp": "it", "align": "S", "ref": "at"}, {"hyp": "work", "align": "C", "ref": "work"}], "id": 336, "errorTypes": {"C": 13, "D": 1, "I": 0, "S": 5, "refLength": 17}}'''
        expand_align = AlignmentReaderJson.read_json(jstr)
        self.assertTrue(len(expand_align.s1), len(expand_align.s2))
        self.assertTrue(len(expand_align.s1), len(expand_align.align))
        
    def test_read_json3(self):
        jstr = '''{"errRate": 0.14285714285714285, "alignments": [{"hyp": "you", "align": "C", "ref": "You"}, {"hyp": "need", "align": "C", "ref": "need"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "know", "align": "C", "ref": "know"}, {"hyp": "that", "align": "C", "ref": "that"}, {"hyp": "the", "align": "C", "ref": "the"}, {"hyp": "average", "align": "C", "ref": "average"}, {"hyp": "patent", "align": "C", "ref": "patent"}, {"hyp": "troll", "align": "C", "ref": "troll"}, {"hyp": "defense", "align": "C", "ref": "defense"}, {"hyp": "cost", "align": "S", "ref": "costs"}, {"hyp": "2000000", "align": "S", "ref": "two million"}, {"hyp": "dollars", "align": "C", "ref": "dollars"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "takes", "align": "C", "ref": "takes"}, {"hyp": "18", "align": "C", "ref": "18"}, {"hyp": "months", "align": "C", "ref": "months"}, {"hyp": "when", "align": "C", "ref": "when"}, {"hyp": "you", "align": "C", "ref": "you"}, {"hyp": "win", "align": "C", "ref": "win"}], "id": 102, "errorTypes": {"C": 18, "D": 0, "I": 0, "S": 3, "refLength": 21}}'''
        expand_align = AlignmentReaderJson.read_json(jstr)
        self.assertTrue(len(expand_align.s1), len(expand_align.s2))
        self.assertTrue(len(expand_align.s1), len(expand_align.align))
        
    def test_read_json4(self):
        jstr = '''{"errRate": 0.2, "alignments": [{"hyp": "you", "align": "C", "ref": "You"}, {"hyp": "might", "align": "C", "ref": "might"}, {"hyp": "have", "align": "C", "ref": "have"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "low bar", "align": "S", "ref": "lobar"}, {"hyp": "pneumonia", "align": "C", "ref": "pneumonia"}, {"hyp": "for", "align": "C", "ref": "for"}, {"hyp": "example", "align": "C", "ref": "example"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "they", "align": "C", "ref": "they"}, {"hyp": "could", "align": "C", "ref": "could"}, {"hyp": "give", "align": "C", "ref": "give"}, {"hyp": "you", "align": "C", "ref": "you"}, {"hyp": "an", "align": "C", "ref": "an"}, {"hyp": "anti", "align": "S", "ref": "antiserum"}, {"hyp": "serum", "align": "S", "ref": "an"}, {"hyp": "injection", "align": "C", "ref": "injection"}, {"hyp": "of", "align": "C", "ref": "of"}, {"hyp": "rabbit", "align": "S", "ref": "rabid"}, {"hyp": "antibodies", "align": "C", "ref": "antibodies"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "the", "align": "C", "ref": "the"}, {"hyp": "bacterium", "align": "C", "ref": "bacterium"}, {"hyp": "streptococcus", "align": "C", "ref": "streptococcus"}, {"hyp": "if", "align": "C", "ref": "if"}, {"hyp": "the", "align": "C", "ref": "the"}, {"hyp": "interned", "align": "S", "ref": "intern"}, {"hyp": "sub-typed", "align": "C", "ref": "sub-typed"}, {"hyp": "it", "align": "C", "ref": "it"}, {"hyp": "correctly", "align": "C", "ref": "correctly"}], "id": 388, "errorTypes": {"C": 25, "D": 0, "I": 0, "S": 6, "refLength": 30}}'''
        expand_align = AlignmentReaderJson.read_json(jstr)
        self.assertTrue(len(expand_align.s1), len(expand_align.s2))
        self.assertTrue(len(expand_align.s1), len(expand_align.align))
        
    def test_read_json5(self):
        jstr = '''{"errRate": 0.32653061224489793, "alignments": [{"hyp": "everyone", "align": "C", "ref": "Everyone"}, {"hyp": "who", "align": "C", "ref": "who"}, {"hyp": "knew", "align": "C", "ref": "knew"}, {"hyp": "me", "align": "C", "ref": "me"}, {"hyp": "before", "align": "C", "ref": "before"}, {"hyp": "nine 11", "align": "S", "ref": "911"}, {"hyp": "the", "align": "I", "ref": ""}, {"hyp": "believes", "align": "S", "ref": "believes"}, {"hyp": "line", "align": "S", "ref": "I'm"}, {"hyp": "", "align": "D", "ref": "dead"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "used", "align": "C", "ref": "used"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "work", "align": "C", "ref": "work"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "bunch", "align": "C", "ref": "bunch"}, {"hyp": "of", "align": "C", "ref": "of"}, {"hyp": "uptight", "align": "C", "ref": "uptight"}, {"hyp": "religious", "align": "C", "ref": "religious"}, {"hyp": "people", "align": "C", "ref": "people"}, {"hyp": "so", "align": "C", "ref": "so"}, {"hyp": "sometimes", "align": "C", "ref": "sometimes"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "didn't", "align": "C", "ref": "didn't"}, {"hyp": "wear", "align": "C", "ref": "wear"}, {"hyp": "panties", "align": "C", "ref": "panties"}, {"hyp": "is", "align": "S", "ref": "and"}, {"hyp": "that", "align": "S", "ref": "just"}, {"hyp": "", "align": "D", "ref": "had"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "big", "align": "C", "ref": "big"}, {"hyp": "smile", "align": "C", "ref": "smile"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "chuckle", "align": "S", "ref": "chuckled"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "myself", "align": "C", "ref": "myself"}, {"hyp": "from", "align": "I", "ref": ""}, {"hyp": "this", "align": "C", "ref": "This"}, {"hyp": "next", "align": "C", "ref": "next"}, {"hyp": "one", "align": "C", "ref": "one"}, {"hyp": "takes", "align": "C", "ref": "takes"}, {"hyp": "", "align": "D", "ref": "a"}, {"hyp": "little", "align": "C", "ref": "little"}, {"hyp": "explanation", "align": "C", "ref": "explanation"}, {"hyp": "of", "align": "S", "ref": "before"}, {"hyp": "right", "align": "S", "ref": "I"}, {"hyp": "here", "align": "S", "ref": "share"}, {"hyp": "", "align": "D", "ref": "it"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "you", "align": "C", "ref": "you"}], "id": 8, "errorTypes": {"C": 36, "D": 4, "I": 2, "S": 10, "refLength": 49}}'''
        expand_align = AlignmentReaderJson.read_json(jstr)
        self.assertTrue(len(expand_align.s1), len(expand_align.s2))
        self.assertTrue(len(expand_align.s1), len(expand_align.align))

    def test_read_alignments_911(self):
        jstr = """{"errRate": 0.32653061224489793, "alignments": [{"hyp": "Everyone", "align": "C", "ref": "Everyone"}, {"hyp": "who", "align": "C", "ref": "who"}, {"hyp": "knew", "align": "C", "ref": "knew"}, {"hyp": "me", "align": "C", "ref": "me"}, {"hyp": "before", "align": "C", "ref": "before"}, {"hyp": "nine", "align": "S", "ref": "9/11"}, {"hyp": "eleven", "align":  "I", "ref": ""}, {"hyp": "the", "align": "I", "ref": ""}, {"hyp": "believes", "align": "S", "ref": "believes"}, {"hyp": "line", "align": "S", "ref": "I'm"}, {"hyp": "", "align": "D", "ref": "dead"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "used", "align": "C", "ref": "used"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "work", "align": "C", "ref": "work"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "bunch", "align": "C", "ref": "bunch"}, {"hyp": "of", "align": "C", "ref": "of"}, {"hyp": "uptight", "align": "C", "ref": "uptight"}, {"hyp": "religious", "align": "C", "ref": "religious"}, {"hyp": "people", "align": "C", "ref": "people"}, {"hyp": "so", "align": "C", "ref": "so"}, {"hyp": "sometimes", "align": "C", "ref": "sometimes"}, {"hyp": "i", "align": "C", "ref": "I"}, {"hyp": "didn't", "align": "C", "ref": "didn't"}, {"hyp": "wear", "align": "C", "ref": "wear"}, {"hyp": "panties", "align": "C", "ref": "panties"}, {"hyp": "is", "align": "S", "ref": "and"}, {"hyp": "that", "align": "S", "ref": "just"}, {"hyp": "", "align": "D", "ref": "had"}, {"hyp": "a", "align": "C", "ref": "a"}, {"hyp": "big", "align": "C", "ref": "big"}, {"hyp": "smile", "align": "C", "ref": "smile"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "chuckle", "align": "S", "ref": "chuckled"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "myself", "align": "C", "ref": "myself"}, {"hyp": "from", "align": "I", "ref": ""}, {"hyp": "this", "align": "C", "ref": "This"}, {"hyp": "next", "align": "C", "ref": "next"}, {"hyp": "one", "align": "C", "ref": "one"}, {"hyp": "takes", "align": "C", "ref": "takes"}, {"hyp": "", "align": "D", "ref": "a"}, {"hyp": "little", "align": "C", "ref": "little"}, {"hyp": "explanation", "align": "C", "ref": "explanation"}, {"hyp": "of", "align": "S", "ref": "before"}, {"hyp": "right", "align": "S", "ref": "I"}, {"hyp": "here", "align": "S", "ref": "share"}, {"hyp": "", "align": "D", "ref": "it"}, {"hyp": "with", "align": "C", "ref": "with"}, {"hyp": "you", "align": "C", "ref": "you"}], "id": 6, "errorTypes": {"C": 36, "D": 4, "I": 3, "S": 9, "refLength": 49}}"""
        exp_ref =     [u'Everyone', u'who', u'knew', u'me', u'before', u'9/11', u'',       u'',    u'believes', u"I'm",  u'dead', u'I', u'used', u'to', u'work', u'with', u'a', u'bunch', u'of', u'uptight', u'religious', u'people', u'so', u'sometimes', u'I', u"didn't", u'wear', u'panties', u'and', u'just', u'had', u'a', u'big', u'smile', u'and', u'chuckled', u'to', u'myself', u'',     u'This', u'next', u'one', u'takes', u'a', u'little', u'explanation', u'before', u'I',     u'share', u'it', u'with', u'you']
        exp_ref_map = [0,           1,      2,       3,     4,         5,                          8,           9,       10,      11,   12,      13,    14,      15,      16,   17,       18,    19,         20,           21,        22,    23,           24,   25,        26,      27,         28,     29,      30,     31,   32,     33,       34,     35,          36,    37,                 39,      40,      41,     42,       43,   44,        45,             46,        47,       48,       49,    50,      51]
        exp_align =   [u'C',        u'C',   u'C',    u'C',  u'C',      u'S',    u'I',      u'I',   u'S',        u'S',    u'D',    u'C', u'C',    u'C',  u'C',    u'C',    u'C', u'C',     u'C',  u'C',       u'C',         u'C',      u'C',  u'C',         u'C', u'C',      u'C',    u'C',       u'S',   u'S',    u'D',   u'C', u'C',   u'C',     u'C',   u'S',        u'C',  u'C',      u'I',    u'C',    u'C',    u'C',   u'C',     u'D', u'C',      u'C',           u'S',      u'S',     u'S',     u'D',  u'C',    u'C']
        exp_hyp =     [u'Everyone', u'who', u'knew', u'me', u'before', u'nine', u'eleven', u'the', u'believes', u'line', u'',     u'i', u'used', u'to', u'work', u'with', u'a', u'bunch', u'of', u'uptight', u'religious', u'people', u'so', u'sometimes', u'i', u"didn't", u'wear', u'panties', u'is',  u'that', u'',    u'a', u'big', u'smile', u'and', u'chuckle',  u'to', u'myself', u'from', u'this', u'next', u'one', u'takes', u'',  u'little', u'explanation', u'of',     u'right', u'here',  u'',   u'with', u'you']
        exp_hyp_map = [0,           1,      2,       3,     4,         5,       6,         7,      8,           9,                11,   12,      13,    14,      15,      16,   17,       18,    19,         20,           21,        22,    23,           24,   25,        26,      27,         28,     29,              31,   32,     33,       34,     35,          36,    37,        38,      39,      40,      41,     42,             44,        45,             46,        47,       48,              50,      51]
        expected = ExpandedAlignment(exp_ref, exp_hyp, exp_align, exp_ref_map, exp_hyp_map, lowercase=True)
        
        actual = AlignmentReaderJson.read_json(jstr)
        self.maxDiff = None
        self.assertEqual(len(actual.s1), len(actual.s2))
        self.assertEqual(actual.s1, expected.s1)
        self.assertEqual(actual.s2, expected.s2)
        self.assertEqual(actual.align, expected.align)
        self.assertEqual(actual.s1_map, expected.s1_map)
        self.assertEqual(actual.s2_map, expected.s2_map)
        
        
    def test_read_alignments_hyphen(self):
        jstr = """{"errRate": 0.0967741935483871, "alignments": [{"hyp": "the", "align": "C", "ref": "The"}, {"hyp": "reason", "align": "C", "ref": "reason"}, {"hyp": "they", "align": "C", "ref": "they"}, {"hyp": "settle", "align": "S", "ref": "settled"}, {"hyp": "out", "align": "C", "ref": "out"}, {"hyp": "is", "align": "C", "ref": "is"}, {"hyp": "because", "align": "C", "ref": "because"}, {"hyp": "it's", "align": "C", "ref": "it's"}, {"hyp": "cheaper", "align": "C", "ref": "cheaper"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "settle", "align": "C", "ref": "settle"}, {"hyp": "than", "align": "C", "ref": "than"}, {"hyp": "to", "align": "C", "ref": "to"}, {"hyp": "fight", "align": "C", "ref": "fight"}, {"hyp": "the", "align": "C", "ref": "the"}, {"hyp": "lawsuit", "align": "C", "ref": "lawsuit"}, {"hyp": "clearly", "align": "C", "ref": "clearly"}, {"hyp": "two", "align": "C", "ref": "two"}, {"hyp": "million", "align": "C", "ref": "million"}, {"hyp": "dollars", "align": "C", "ref": "dollars"}, {"hyp": "cheaper", "align": "C", "ref": "cheaper"}, {"hyp": "in", "align": "C", "ref": "in"}, {"hyp": "some", "align": "C", "ref": "some"}, {"hyp": "cases", "align": "C", "ref": "cases"}, {"hyp": "and", "align": "C", "ref": "and"}, {"hyp": "much", "align": "C", "ref": "much"}, {"hyp": "worse", "align": "C", "ref": "worse"}, {"hyp": "a", "align": "S", "ref": "if"}, {"hyp": "few", "align": "S", "ref": "you"}, {"hyp": "actually", "align": "C", "ref": "actually"}, {"hyp": "lose", "align": "C", "ref": "lose"}], "id": 9, "errorTypes": {"C": 28, "D": 0, "I": 0, "S": 3, "refLength": 31}}"""

        exp_ref =     ["The",  "reason",  "they",  "settled",  "out",  "is",  "because",  "it's",  "cheaper",  "to",  "settle",  "than",  "to",  "fight",  "the",  "lawsuit",  "clearly",  "two",  "million",  "dollars",  "cheaper",  "in",  "some",  "cases",  "and",  "much",  "worse",  "if",  "you",  "actually",  "lose"]
        exp_ref_map = [0,       1,        2,       3,          4,      5,     6,          7,        8,          9,    10,        11,      12,    13,       14,     15,         16,         17,      18,         19,        20,         21,    22,      23,       24,     25,      26,       27,    28,     29,          30]
        exp_align =   ["C",    "C",       "C",     "S",        "C",    "C",   "C",        "C",     "C",        "C",   "C",       "C",     "C",   "C",      "C",    "C",        "C",        "C",    "C",        "C",        "C",        "C",   "C",     "C",      "C",    "C",     "C",      "S",   "S",    "C",         "C"]   
        exp_hyp =     ["the",  "reason",  "they",  "settle",   "out",  "is",  "because",  "it's",  "cheaper",  "to",  "settle",  "than",  "to",  "fight",  "the",  "lawsuit",  "clearly",  "two",  "million",  "dollars",  "cheaper",  "in",  "some",  "cases",  "and",  "much",  "worse",  "a",   "few",  "actually",  "lose"]
        exp_hyp_map = [0,       1,        2,       3,          4,      5,     6,          7,        8,          9,    10,        11,      12,    13,       14,     15,         16,         17,      18,         19,        20,         21,    22,      23,       24,     25,      26,       27,    28,     29,          30]
        expected = ExpandedAlignment(exp_ref, exp_hyp, exp_align, exp_ref_map, exp_hyp_map, lowercase=True)
        
        actual = AlignmentReaderJson.read_json(jstr)
        self.maxDiff = None
        self.assertEqual(len(actual.s1), len(actual.s2))
        self.assertEqual(actual.s1, expected.s1)
        self.assertEqual(actual.s2, expected.s2)
        self.assertEqual(actual.align, expected.align)
        self.assertEqual(actual.s1_map, expected.s1_map)
        self.assertEqual(actual.s2_map, expected.s2_map)
    

if __name__ == "__main__":
    unittest.main()